
# coding: utf-8

# In[340]:


import scipy as sp
import numpy as np
import matplotlib.pylab as pl
from mpl_toolkits.mplot3d import Axes3D  # noqa
import ot


# In[341]:


xa=np.array([[35, 2157, 4.8442864],
[35, 2159, 4.7989058],
[361, 1899, 4.0939121],
[361, 1900, 4.1364598],
[361, 1901, 4.6285534],
[551, 2171, 4.9045334],
[551, 2172, 4.7971315],
[552, 2171, 4.9422178],
[552, 2172, 4.4099588],
[554, 2171, 3.8733644],
[554, 2172, 3.9985328],
[555, 2169, 4.979208],
[555, 2170, 4.5772133],
[555, 2171, 3.4252901],
[555, 2172, 3.978338],
[557, 2160, 4.8183999],
[557, 2161, 4.1573939],
[558, 2160, 4.2198811],
[558, 2161, 3.2653489],
[559, 2161, 4.0848079],
[560, 2160, 4.5119972],
[560, 2161, 4.170424],
[561, 2154, 4.2306108],
[561, 2155, 4.7322292],
[561, 2158, 4.9143267],
[561, 2160, 3.5732927],
[561, 2161, 3.5204601],
[557, 2163, 4.8267188],
[557, 2167, 4.4864683],
[558, 2162, 4.8149419],
[558, 2163, 4.6349106],
[558, 2167, 4.7841902],
[560, 2162, 4.8277683],
[560, 2163, 4.8792114],
[560, 2167, 4.4437551],
[560, 2168, 4.9149346],
[561, 2162, 3.8031518],
[561, 2163, 4.0638084],
[561, 2167, 3.6987021],
[561, 2168, 4.0407467],
[556, 2169, 4.8811712],
[556, 2171, 4.0904346],
[556, 2172, 4.0230293],
[557, 2169, 3.8140812],
[557, 2170, 4.3060646],
[557, 2171, 3.7073104],
[557, 2172, 3.8080869],
[558, 2169, 4.3114753],
[558, 2171, 4.7862911],
[558, 2172, 4.5678864],
[559, 2169, 4.7976046],
[559, 2172, 4.4176145],
[560, 2169, 4.1105723],
[560, 2170, 4.5373478],
[560, 2171, 4.2414875],
[560, 2172, 4.7765102],
[561, 2169, 3.7249677],
[561, 2170, 4.3332357],
[561, 2171, 4.4636803],
[570, 1843, 4.4365511],
[562, 2171, 4.9579239],
[571, 1843, 4.7844548],
[572, 1842, 4.4828882],
[572, 1843, 3.7181509],
[572, 1844, 4.8977971],
[573, 1842, 4.5455813],
[573, 1843, 4.118917],
[573, 1844, 4.9345617],
[574, 1841, 4.2633634],
[574, 1842, 3.6650093],
[574, 1843, 3.6408319],
[574, 1844, 3.8333459],
[575, 1841, 4.3712387],
[575, 1842, 4.2733545],
[575, 1843, 4.534328],
[575, 1844, 4.4803038],
[576, 1841, 3.8825288],
[576, 1842, 4.2232237],
[576, 1843, 4.4392095],
[576, 1844, 4.7852564],
[577, 1841, 4.5323143],
[578, 1842, 4.9155211],
[578, 1843, 4.2415915],
[578, 1844, 4.9826398],
[574, 1851, 4.792882],
[575, 1850, 4.8610902],
[575, 1851, 3.6743619],
[576, 1847, 4.7211471],
[576, 1849, 4.9873452],
[576, 1850, 4.5277705],
[576, 1851, 3.4444418],
[577, 1847, 4.2625785],
[577, 1848, 4.2202258],
[577, 1849, 3.8780758],
[577, 1850, 3.7915163],
[577, 1851, 2.7427812],
[577, 1852, 4.9813576],
[577, 2086, 4.7991042],
[577, 2087, 4.6032009],
[575, 2089, 4.9753718],
[575, 2090, 4.951755],
[575, 2091, 3.940603],
[575, 2093, 4.4577546],
[576, 2089, 4.5768418],
[576, 2090, 4.8771906],
[576, 2091, 4.4133539],
[576, 2092, 4.9044342],
[576, 2093, 4.2876759],
[577, 2088, 4.2642527],
[577, 2089, 3.2112346],
[577, 2090, 3.6221306],
[577, 2091, 3.5808625],
[577, 2092, 3.7743735],
[577, 2093, 3.4158499],
[575, 2116, 4.7970977],
[576, 2116, 3.8385279],
[576, 2117, 4.2349052],
[576, 2119, 3.6276577],
[577, 2115, 4.8497677],
[577, 2116, 3.5309904],
[577, 2117, 3.7281454],
[577, 2118, 4.7570472],
[577, 2119, 3.2642775],
[573, 2125, 4.894208],
[574, 2125, 4.8690052],
[575, 2125, 4.0875092],
[575, 2126, 4.4830174],
[576, 2125, 4.8522277],
[577, 2125, 4.8687692],
[580, 1842, 4.9811721],
[580, 1843, 4.1610112],
[587, 1842, 4.9717059],
[587, 1843, 4.6487303],
[587, 1844, 4.3751936],
[594, 2127, 4.4464617],
[594, 2128, 4.8790464],
[823, 1884, 4.6264696],
[824, 1883, 4.9581065],
[824, 1884, 4.2018313],
[825, 1882, 3.6511288],
[825, 1883, 3.5640156],
[825, 1884, 2.8589969],
[827, 1884, 4.5611582],
[829, 1882, 4.7175331],
[829, 1884, 3.7274201],
[830, 1882, 4.8071814],
[830, 1884, 4.096643],
[831, 1881, 4.840342],
[831, 1882, 4.5051045],
[831, 1884, 3.8409233],
[832, 1882, 4.3335962],
[832, 1883, 4.5115399],
[832, 1884, 3.9985688],
[833, 1881, 4.5063949],
[833, 1882, 3.4744558],
[833, 1883, 3.4354575],
[833, 1884, 3.271009],
[837, 1900, 4.4432368],
[838, 1899, 4.8912687],
[838, 1900, 3.4862583],
[841, 1863, 4.8131042],
[842, 1862, 4.827136],
[842, 1863, 3.69993],
[842, 1864, 4.6458492],
[842, 1865, 4.9331679],
[842, 1866, 4.9774904],
[839, 1882, 4.903533],
[839, 1883, 4.5478592],
[840, 1880, 4.4443846],
[840, 1881, 4.8699532],
[840, 1883, 4.7448874],
[840, 1885, 4.6769829],
[840, 1886, 4.7706852],
[841, 1879, 4.5580835],
[841, 1880, 3.8771062],
[841, 1881, 4.6509652],
[841, 1882, 4.7555866],
[841, 1883, 4.1984921],
[841, 1885, 4.3160648],
[841, 1886, 4.8023825],
[842, 1879, 4.0923281],
[842, 1880, 3.5021107],
[842, 1881, 4.650156],
[842, 1883, 4.6974778],
[842, 1885, 3.574141],
[842, 1886, 4.2017064],
[840, 1895, 4.9826589],
[841, 1887, 4.7191296],
[841, 1895, 4.5949998],
[842, 1887, 3.6331713],
[842, 1888, 4.3256836],
[842, 1894, 3.805496],
[842, 1895, 3.2853987],
[839, 1900, 4.6522999],
[840, 1900, 3.8903315],
[841, 1900, 4.9122734],
[842, 1896, 4.5274658],
[842, 1897, 4.8954473],
[842, 1900, 4.8142905],
[843, 1900, 4.1093245],
[840, 2128, 4.8603263],
[841, 2127, 4.7614913],
[841, 2128, 4.1845374],
[842, 2127, 4.2219515],
[842, 2128, 3.3847632],
[843, 2127, 4.9614077],
[843, 2128, 4.3378949],
[844, 2127, 4.1114593],
[844, 2128, 3.7677116],
[855, 1894, 4.6058893],
[855, 1895, 3.9796157],
[845, 1897, 4.514245],
[845, 1898, 4.5208902],
[845, 1899, 4.4679589],
[845, 1900, 3.3961458],
[846, 1897, 4.6932893],
[846, 1898, 4.6375318],
[846, 1899, 4.9066668],
[846, 1900, 4.2111378],
[847, 1897, 4.5687599],
[847, 1898, 4.0548124],
[847, 1899, 4.2704368],
[847, 1900, 3.9405243],
[848, 1898, 4.9523721],
[848, 1899, 4.7555466],
[848, 1900, 4.3570123],
[849, 1900, 4.7639308],
[850, 1900, 4.962009],
[854, 1897, 4.3607059],
[854, 1898, 4.7054987],
[854, 1900, 4.9188886],
[854, 1902, 4.7770958],
[854, 1903, 4.3228583],
[855, 1896, 4.4209747],
[855, 1897, 3.370368],
[855, 1898, 4.0296454],
[855, 1899, 4.9267154],
[855, 1900, 4.5802445],
[855, 1902, 3.7149432],
[855, 1903, 3.2446215],
[854, 2127, 4.9781294],
[854, 2128, 4.2885623],
[855, 2127, 4.5657864],
[855, 2128, 3.62588],
[856, 2128, 4.6400824],
[857, 2127, 4.4408736],
[857, 2128, 4.2564154],
[858, 2124, 4.4118524],
[858, 2125, 4.5685463],
[858, 2126, 4.4625731],
[858, 2127, 3.3674533],
[858, 2128, 3.5930395],
[859, 2127, 4.2115059],
[859, 2128, 4.6393833],
[862, 2132, 4.9145226],
[864, 2132, 4.0785632],
[865, 2131, 4.9046211],
[865, 2132, 3.9894414],
[866, 2131, 4.7144213],
[866, 2132, 3.7900052],
[867, 2132, 4.9017262],
[868, 2131, 3.7454374],
[868, 2132, 2.8065009],
[865, 2134, 4.9893675],
[866, 2133, 4.8949347],
[866, 2134, 4.2279267],
[866, 2140, 4.6447949],
[866, 2141, 4.0895963],
[867, 2134, 4.8592415],
[867, 2141, 4.4848294],
[868, 2133, 3.9463131],
[868, 2134, 3.2878349],
[868, 2135, 4.4635558],
[868, 2140, 3.4785938],
[868, 2141, 2.8857777],
[868, 2142, 4.789052],
[864, 2159, 4.8212819],
[868, 2156, 4.9743786],
[868, 2157, 4.9079113],
[868, 2159, 4.0215044],
[873, 2158, 4.7070355],
[873, 2159, 4.6780996],
[874, 2158, 4.9788723],
[874, 2159, 4.5264177],
[875, 2157, 3.8164365],
[875, 2158, 3.3484588],
[875, 2159, 3.5960407]])


# In[342]:


xt=np.array([[99, 2041, 4.9077525],
[101, 2041, 3.7506785],
[289, 3899, 4.8407016],
[290, 3898, 4.8371735],
[290, 3899, 3.9239826],
[290, 3902, 4.4246445],
[297, 3902, 4.9016609],
[298, 3902, 4.9081473],
[499, 3901, 4.8166037],
[522, 3746, 4.9081779],
[523, 3746, 4.7711339],
[524, 3746, 4.7137771],
[525, 3745, 4.7982264],
[525, 3746, 4.4568095],
[525, 3747, 4.5332336],
[526, 3745, 3.7026823],
[526, 3746, 3.5858073],
[526, 3747, 3.1733179],
[527, 3745, 4.2658482],
[527, 3746, 4.1537881],
[527, 3747, 3.4805028],
[528, 3747, 4.3969092],
[530, 3745, 4.0253859],
[530, 3746, 3.7470098],
[530, 3747, 3.3887734],
[531, 3745, 4.9300733],
[531, 3746, 4.7661166],
[531, 3747, 4.1637859],
[532, 3747, 4.8935537],
[530, 3757, 4.6282673],
[531, 3754, 4.480042],
[531, 3757, 4.0679579],
[532, 3754, 4.8128853],
[532, 3757, 4.7046938],
[531, 3875, 4.8619757],
[532, 3875, 4.3619561],
[528, 3900, 4.7222247],
[528, 3901, 4.6028757],
[529, 3897, 4.9892564],
[529, 3900, 3.874176],
[529, 3901, 3.5698614],
[529, 3902, 4.5080361],
[532, 3900, 4.6995392],
[532, 3901, 4.2095175],
[532, 3902, 4.8011289],
[528, 3916, 4.9890337],
[529, 3916, 4.6386847],
[532, 3916, 4.8818893],
[525, 4114, 4.154191],
[526, 4113, 4.811697],
[526, 4114, 3.7811441],
[526, 4115, 4.582931],
[526, 4116, 4.6520028],
[534, 4114, 4.5207725],
[535, 4114, 4.1852236],
[525, 4120, 4.1416969],
[526, 4117, 4.9661112],
[526, 4119, 4.6870494],
[526, 4120, 3.2905076],
[527, 4119, 4.8773479],
[527, 4120, 3.4816554],
[528, 4119, 4.2840605],
[528, 4120, 3.0405979],
[529, 4119, 4.914608],
[529, 4120, 3.8828187],
[530, 4120, 4.6226802],
[532, 4120, 4.8797278],
[534, 4119, 4.9067349],
[534, 4120, 3.8331521],
[535, 4117, 4.6514535],
[535, 4118, 4.8966198],
[535, 4119, 3.7729824],
[535, 4120, 2.873384],

[528, 4242, 4.4177408],
[528, 4243, 4.2702246],
[529, 4242, 4.5077233],
[529, 4243, 4.8714166],
[534, 4243, 4.0360851],
[535, 4242, 4.6509957],
[535, 4243, 3.2587764],
[534, 4262, 4.6012044],
[535, 4260, 4.5167427],
[535, 4262, 3.9786675],
[534, 4519, 4.6320405],
[535, 4519, 4.4023366],
[536, 4243, 4.2664084],
[537, 4243, 3.9311068],
[538, 4243, 3.8875563],
[539, 4243, 4.2853971],
[536, 4260, 4.8034196],
[536, 4261, 4.7303143],
[536, 4262, 4.5694256],
[537, 4259, 4.4991655],
[537, 4260, 3.5922601],
[537, 4261, 3.3585327],
[537, 4262, 3.6415329],
[538, 4259, 4.6966648],
[538, 4260, 4.0848579],
[538, 4261, 3.6263034],
[538, 4262, 4.5708389],
[539, 4261, 4.843276],
[536, 4519, 4.80866],
[537, 4519, 4.5213666],
[540, 4243, 4.0844851],
[541, 4243, 4.7147412],
[542, 4242, 4.890358],
[542, 4243, 4.150743],
[543, 4241, 4.3323703],
[543, 4242, 3.8281484],
[543, 4243, 3.2612059],
[541, 4255, 4.8234577],
[541, 4256, 4.4231567],
[542, 4252, 4.8125601],
[542, 4254, 4.7282329],
[542, 4255, 4.6646314],
[542, 4256, 4.4947057],
[543, 4251, 4.5957708],
[543, 4252, 3.9684844],
[543, 4254, 4.2242012],
[543, 4255, 4.0076904],
[543, 4256, 4.1553073],
[540, 4257, 4.8491564],
[540, 4258, 4.2202597],
[540, 4259, 3.9750156],
[540, 4260, 3.502878],
[540, 4261, 2.8713229],
[540, 4262, 4.3372154],
[541, 4257, 4.8208938],
[541, 4258, 4.468761],
[541, 4259, 4.6726961],
[541, 4260, 4.5300183],
[541, 4261, 3.8528922],
[542, 4257, 4.801743],
[542, 4258, 4.8885913],
[542, 4261, 4.9050217],
[543, 4257, 4.0472007],
[543, 4258, 4.3885469],
[543, 4259, 4.5000138],
[543, 4261, 4.9114079],
[550, 4252, 4.4265289],
[550, 4254, 3.9914858],
[551, 4252, 3.9336157],
[551, 4253, 4.6999245],
[551, 4254, 3.1328838],
[555, 3897, 4.5253787],
[555, 3898, 4.6500645],
[555, 3899, 4.5015163],
[555, 3900, 4.2039919],
[555, 3901, 4.0211058],
[555, 3902, 4.1821971],
[556, 3897, 4.2442074],
[556, 3898, 3.9336514],
[556, 3899, 3.7158027],
[556, 3900, 4.3119125],
[556, 3901, 4.1008983],
[556, 3902, 3.8007033],
[557, 3897, 4.9586611],
[557, 3898, 4.6087918],
[557, 3899, 4.6695533],
[552, 4242, 4.9993324],
[555, 4241, 4.9577341],
[555, 4242, 4.6530943],
[552, 4252, 4.5672731],
[552, 4253, 4.8869629],
[552, 4254, 4.3979864],
[553, 4252, 4.2081227],
[553, 4253, 4.1273479],
[553, 4254, 4.0544286],
[554, 4253, 4.8914104],
[561, 4252, 4.7730851],
[561, 4253, 4.6527438],
[561, 4254, 4.1654549],
[554, 4340, 4.9399276],
[555, 4338, 4.9440331],
[555, 4340, 3.9747455],
[556, 4340, 4.1193328],
[557, 4338, 4.7373285],
[557, 4340, 3.7332065],
[558, 4340, 4.6703358],
[563, 4252, 4.4299073],
[563, 4253, 4.1110525],
[563, 4254, 3.7047303],
[564, 4254, 4.368176],
[565, 4253, 4.9319806],
[565, 4254, 4.4272647],
[567, 4254, 4.8650732],
[563, 4323, 4.8734226],
[564, 4323, 4.4925289],
[565, 4321, 4.5622373],
[565, 4323, 3.3329604],
[565, 4325, 4.9381409],
[566, 4321, 4.3948555],
[566, 4322, 4.9110451],
[566, 4323, 3.2533884],
[567, 4321, 4.034452],
[567, 4322, 4.5557737],
[567, 4323, 3.0376041],
[568, 4323, 4.0385447],
[594, 4254, 4.8844762],
[699, 2173, 4.9454799],
[699, 2175, 3.7431426],
[700, 2173, 4.9210715],
[700, 2175, 3.8648984],
[701, 2175, 4.5049934],
[702, 2173, 4.8141356],
[702, 2175, 3.5952733],
[703, 2175, 4.4825206],
[714, 1810, 4.5029292],
[704, 2173, 4.1262341],
[704, 2174, 4.5899115],
[704, 2175, 2.9702587],
[705, 2173, 4.6639552],
[705, 2174, 4.7536612],
[705, 2175, 3.7171917],
[706, 2173, 4.578824],
[706, 2174, 4.4188375],
[706, 2175, 3.8915737],
[707, 2175, 4.5508451],
[713, 2173, 4.6860361],
[713, 2174, 4.5918961],
[713, 2175, 3.9205112],
[708, 2251, 4.5033031],
[708, 2252, 4.1125011],
[708, 2253, 4.464674],
[709, 2252, 4.7146168],
[715, 1810, 4.6735034],
[716, 1809, 4.5097075],
[716, 1810, 3.6568229],
[717, 1809, 4.907105],
[717, 1810, 4.352396],
[719, 1809, 4.3855019],
[719, 1810, 3.922332],
[719, 1811, 4.0915866],
[720, 1810, 3.9010315],
[721, 1809, 4.7340946],
[721, 1810, 3.3725235],
[719, 2038, 4.2077694],
[719, 2039, 4.0788412],
[719, 2040, 4.710288],
[719, 2041, 3.7564847],
[721, 2041, 4.752018],
[716, 2159, 4.7611885],
[717, 2158, 4.5406585],
[717, 2159, 3.6321666],
[718, 2159, 4.3799653],
[719, 2158, 4.0183401],
[719, 2159, 3.5897696],
[715, 2173, 3.8675907],
[715, 2174, 3.8745975],
[715, 2175, 3.1894186],
[716, 2173, 4.5535593],
[716, 2174, 4.4428926],
[716, 2175, 4.1328025],
[717, 2172, 4.8642383],
[717, 2173, 4.0523887],
[717, 2174, 4.1232738],
[717, 2175, 3.8441916],
[718, 2172, 4.9037671],
[718, 2173, 4.3449564],
[718, 2174, 4.8157668],
[718, 2175, 3.8893683],
[736, 2252, 4.749084],
[742, 1801, 4.9717441],
[742, 1806, 4.5471067],
[743, 1801, 4.8669763],
[743, 1805, 4.2448802],
[743, 1806, 3.6312406],
[744, 1806, 4.4784579],
[745, 1806, 4.2920537],
[748, 1800, 4.8081584],
[748, 1801, 3.8011668],
[748, 1802, 4.564743],
[748, 1803, 4.4173918],
[748, 1805, 4.5347123],
[748, 1806, 4.3101835],
[749, 1800, 4.1447487],
[749, 1801, 3.1789658],
[749, 1802, 3.8045769],
[749, 1803, 3.5098963],
[749, 1804, 4.9950619],
[749, 1805, 4.137958],
[749, 1806, 3.8812225],
[741, 1810, 4.907372],
[742, 1810, 4.5090489],
[743, 1807, 4.5486579],
[743, 1808, 4.2038336],
[743, 1809, 4.4172044],
[743, 1810, 3.6380453],
[744, 1808, 4.8568468],
[744, 1810, 4.5681853],
[745, 1808, 4.1574311],
[745, 1809, 4.4598627],
[745, 1810, 4.4164925],
[745, 1812, 4.7075167],
[745, 1813, 4.7369304],
[747, 1813, 4.9432216],
[748, 1810, 4.3991008],
[749, 1807, 4.9791064],
[749, 1810, 4.9975863],
[748, 1879, 4.7617235],
[749, 1879, 3.5537558],
[749, 1880, 4.3743715],
[745, 2252, 4.9110756],
[745, 2253, 4.9915209],
[746, 2251, 3.9118111],
[746, 2252, 3.4962873],
[746, 2253, 3.5303996],
[747, 2251, 3.6449618],
[747, 2252, 3.7073889],
[747, 2253, 2.8637261],
[746, 2269, 4.9591966],
[746, 2270, 4.8386974],
[746, 2272, 4.205586],
[747, 2269, 3.5568206],
[747, 2270, 3.4279585],
[747, 2271, 4.3708978],
[747, 2272, 2.9510217],
[743, 2280, 4.9569407],
[744, 2280, 4.7746143],
[745, 2279, 4.2930536],
[745, 2280, 4.0125861],
[746, 2279, 4.65977],
[746, 2280, 4.5992002],
[747, 2278, 4.9489903],
[747, 2279, 4.0643106],
[747, 2280, 4.5258493],
[754, 1788, 4.8685169],
[750, 1801, 4.0090861],
[750, 1802, 4.5916195],
[750, 1803, 4.522356],
[751, 1801, 3.6216199],
[751, 1802, 3.7661655],
[751, 1803, 3.6567237],
[751, 1804, 4.5438156],
[752, 1801, 4.3013229],
[752, 1802, 4.4149823],
[752, 1803, 4.5765743],
[752, 1804, 4.8530426],
[753, 1800, 4.9915304],
[753, 1801, 3.7811267],
[753, 1802, 4.0513859],
[753, 1803, 4.6109376],
[753, 1804, 4.2308807],
[754, 1799, 4.4307365],
[754, 1800, 4.2787237],
[754, 1801, 3.1106973],
[754, 1802, 3.1472564],
[754, 1803, 3.880765],
[754, 1804, 3.1018801],
[754, 1805, 4.781631],
[755, 1801, 4.5799513],
[756, 1801, 4.5469475],
[756, 1802, 4.2576218],
[756, 1803, 3.7271624],
[757, 1801, 4.6810808],
[757, 1802, 3.9885693],
[757, 1803, 3.3342063],
[757, 1804, 4.5717983],
[750, 1810, 4.2545381],
[751, 1810, 4.85886],
[752, 1810, 4.737421],
[753, 1807, 4.9952602],
[753, 1810, 3.9947457],
[754, 1807, 4.6819081],
[754, 1810, 4.4433928],
[755, 1807, 4.9491572],
[755, 1809, 4.5600824],
[755, 1810, 3.4051421],
[755, 1811, 4.4758878],
[754, 1824, 4.8993826],
[753, 2041, 4.8543701],
[755, 2040, 4.8934145],
[755, 2041, 3.7059407],
[752, 4525, 4.9955721],
[752, 4526, 4.6674585],
[753, 4524, 3.89101],
[753, 4525, 3.5012648],
[753, 4526, 3.45963],
[754, 4523, 4.8836026],
[754, 4524, 3.3868644],
[754, 4525, 3.1539516],
[754, 4526, 2.7873333],
[755, 4523, 4.9907098],
[755, 4524, 3.6240625],
[755, 4525, 2.9815331],
[755, 4526, 3.62778],
[758, 1803, 4.7724867],
[765, 1803, 4.4420195],
[766, 1803, 4.4838662],
[767, 1803, 4.5183425],
[768, 1803, 4.2163625],
[769, 1803, 4.9002519],
[770, 1803, 4.2162199],
[766, 1879, 4.4292431],
[767, 1878, 4.9979787],
[767, 1879, 4.9279237],
[768, 1877, 4.5663867],
[768, 1878, 3.7185452],
[768, 1879, 3.6843231],
[769, 1878, 4.4654632],
[769, 1879, 3.9593058],
[773, 1791, 4.829],
[774, 1790, 4.6099305],
[774, 1791, 3.4095433],
[775, 1790, 4.4830298],
[775, 1791, 3.4626327],
[776, 1791, 4.5615835],
[777, 1786, 4.9813604],
[777, 1787, 3.8860066],
[777, 1788, 3.9260199],
[777, 1789, 4.3167853],
[777, 1790, 3.571486],
[777, 1791, 2.7810276],
[777, 1792, 4.3165088],
[777, 1793, 4.6806774],
[777, 1795, 4.4852619],
[772, 1802, 4.3658152],
[772, 1803, 3.2383673],
[772, 1804, 4.8270245],

[773, 1802, 4.7781439],
[773, 1803, 3.8667548],
[773, 1804, 4.8716035],
[774, 1802, 3.9719181],
[774, 1803, 3.3949707],
[774, 1804, 3.7334616],
[775, 1802, 3.7238483],
[775, 1803, 3.3046787],
[775, 1804, 3.3670862],
[776, 1802, 4.2825069],
[776, 1803, 3.6938722],
[776, 1804, 4.1455274],
[777, 1801, 4.9766879],
[777, 1802, 3.5674851],
[777, 1803, 3.5996494],
[777, 1804, 2.8213658],
[772, 1877, 4.9555554],
[775, 1876, 4.7272515],
[775, 1877, 4.0806789],
[775, 1881, 4.0986366],
[775, 1882, 3.6949544],
[776, 1876, 4.1815987],
[776, 1877, 3.3298514],
[776, 1878, 4.4119706],
[776, 1881, 3.7435651],
[776, 1882, 3.7280681],
[777, 1876, 4.6121478],
[777, 1877, 4.3967242],
[777, 1881, 3.6482217],
[777, 1882, 2.9556065],
[774, 1889, 4.9740458],
[775, 1883, 4.56812],
[775, 1884, 4.6781278],
[775, 1885, 3.8775115],
[775, 1886, 4.5838733],
[775, 1887, 4.6109052],
[775, 1889, 4.3024497],
[776, 1883, 4.068666],
[776, 1884, 4.3998146],
[776, 1885, 3.5996864],
[776, 1886, 4.5964522],
[776, 1887, 4.6675715],
[776, 1889, 4.6454306],
[777, 1883, 4.1066732],
[777, 1884, 3.9661226],
[777, 1885, 3.3383865],
[777, 1886, 3.8682871],
[777, 1887, 4.1678953],
[777, 1889, 3.846946],
[810, 1791, 4.6208296],
[810, 1792, 4.9566422],
[808, 1885, 4.7081242],
[808, 1886, 4.9149079],
[808, 1887, 3.9143021],
[808, 1888, 3.6638081],
[808, 1889, 3.9382105],
[809, 1886, 4.8351769],
[809, 1887, 3.5174892],
[809, 1888, 3.2299531],
[809, 1889, 3.2859261],
[810, 1887, 3.9168656],
[810, 1888, 3.9505956],
[810, 1889, 3.2519598],
[809, 4271, 4.8023458],
[809, 4272, 4.2966485],
[809, 4273, 4.8818059],
[810, 4271, 4.5949082],
[810, 4272, 4.2236376],
[819, 4254, 4.5905938],
[819, 4256, 4.8233223],
[844, 4272, 4.7913918],
[842, 4321, 4.3360224],
[842, 4322, 3.8406687],
[842, 4323, 4.6912112],
[843, 4320, 4.4253621],
[843, 4321, 3.5929849],
[843, 4322, 3.4870095],
[843, 4323, 3.660301],
[844, 4320, 4.2048888],
[844, 4321, 3.7708979],
[844, 4322, 4.0229053],
[844, 4323, 3.8088546]])


# In[343]:


n_samples = 30  # nb samples

mu_s = np.array([0, 0])
cov_s = np.array([[1, 0], [0, 1]])

mu_t = np.array([4, 4, 4])
cov_t = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])


#xs = ot.datasets.get_2D_samples_gauss(n_samples, mu_s, cov_s)
#P = sp.linalg.sqrtm(cov_t)
#xt = np.random.randn(n_samples, 3).dot(P) + mu_t

#xt = np.random.uniform(low=-6.0, high=6.0, size=(10,3))

xt=np.array([[843, 4323, 3.660301],
[84400, 4320, 4.2048888],
[84400, 4321, 3.7708979]])

xa=np.array([[100000000000000000000, 4323, 3.660301],
[1, 4320, 4.2048888],
[1, 4321, 3.7708979]])

shape1=600-xt.shape[0]
shape2=600-xa.shape[0]

xt=np.pad(xt, ((0, shape1),(0,0)), 'constant')
xa=np.pad(xa, ((0, shape2),(0,0)), 'constant')


#xa=np.array([[-2.35958169, -1.75114901,  1.76036442], [-5.47679866, -4.52043438, -0.63641635], [ 4.97082398,  0.72697265, -0.83660532], [ 5.76409691,  1.30603695,  0.14679285],[ 4.60594314, -0.72420582,  4.97126942],[-3.6055805,  -5.25623499,  3.94349328],[ 5.46544688,  1.68798483,  3.94137674],[ 5.79652289,  4.84462505, -3.68777008],[ 1.45255353, -5.32648906,  5.57028304],[ 0.07444352,  1.17005218, -5.46447227]])
#print xa

#xt=np.array([[-2.35958169, -1.75114901,  1.76036442], [-5.47679866, -4.52043438, -0.63641635], [ 4.97082398,  0.72697265, -0.83660532], [ 5.76409691,  1.30603695,  0.14679285],[ 4.60594314, -0.72420582,  4.97126942],[-3.6055805,  -5.25623499,  3.94349328],[ 5.46544688,  1.68798483,  3.94137674],[ 5.79652289,  4.84462505, -3.68777008],[ 1.45255353, -5.32648906,  5.57028304],[ 0.07444352,  1.17005218, -5.46447227]])
#xt=np.flip(xa,0)
#print xt
print(xa.shape)
print(xt.shape)
print xt
print xa
fig = pl.figure()
ax2 = fig.add_subplot(122, projection='3d')
ax2.scatter(xt[:, 0], xt[:, 1], xt[:, 2], color='r')
pl.show()


# In[344]:


C1 = sp.spatial.distance.cdist(xa, xa)
#C1 /= C1.max()
print C1.shape

C2 = sp.spatial.distance.cdist(xt, xt)
#C2 /= C2.max()

pl.subplot(121)
pl.imshow(C1)
pl.show()

pl.subplot(122)
pl.imshow(C2)
pl.show()


# In[345]:


p = ot.unif(n_samples)
q = ot.unif(n_samples)

gw = ot.gromov_wasserstein(C1, C2, p, q, 'square_loss', epsilon=5e-4)
gw_dist = ot.gromov_wasserstein2(C1, C2, p, q, 'square_loss', epsilon=5e-4)

print('Gromov-Wasserstein distances between the distribution: ' + str(gw_dist))

pl.figure()
pl.imshow(gw, cmap='jet')
pl.colorbar()
pl.show()


# In[364]:


for i in range(1):
#def deep_learning(protein_train,protein_test,protein_target):
    from keras.models import Sequential
    from keras.layers.convolutional import Conv3D,Conv1D
    from keras.layers import Conv3D, MaxPooling3D,Activation,Reshape,Dense,AveragePooling1D,Dropout,Flatten
    from keras.layers.normalization import BatchNormalization
    from keras.optimizers import Adam
    
    import keras.backend as K #For compile
    
    print('Start training')
    seq = Sequential()

    #seq.add(Conv3D(11, 3, 3, 3, activation='relu', 
                            #border_mode='valid', name='conv1',
                            #subsample=(1, 1, 1),
                            #dim_ordering='th', 
                            #input_shape=(11,120, 120, 120)))


    seq.add(Conv1D(filters=128, kernel_size=(3), strides=(1), activation='relu',padding='valid', input_shape=(600,3)))
    
    seq.add(Conv1D(filters=128, kernel_size=(3), strides=(1), activation='relu',padding='valid', input_shape=(600,3)))

    seq.add(AveragePooling1D(pool_size=2, strides=None, padding='valid'))
    
    seq.add(Dropout(0.25))
    
    seq.add(Conv1D(filters=256, kernel_size=(3), strides=(1), activation='relu',padding='valid', input_shape=(600,3)))
    
    seq.add(Conv1D(filters=256, kernel_size=(3), strides=(1), activation='relu',padding='valid', input_shape=(600,3)))

    seq.add(AveragePooling1D(pool_size=2, strides=None, padding='valid'))
    
    seq.add(Dropout(0.25))
    
    seq.add(Flatten())
    
    seq.add(Dense(4096,activation='relu'))
    seq.add(Dense(4096,activation='relu'))
    
    seq.add(Dense(4096,activation='tanh'))
    seq.add(Dense(4096,activation='tanh'))
    
    seq.add(Dropout(0.5))

    #seq.add(Activation('linear'))
   # seq.add(Dense(256,activation='linear'))

    #seq.add(Activation('relu'))

    #seq.add(Activation('linear'))
    #seq.add(Dense(128,activation='linear'))

    #seq.add(Activation('relu'))

    #seq.add(Activation('linear'))
   # seq.add(Dense(1,activation='linear'))
    
    

    seq.summary()
    print('ready')
    def mean_pred(y_true, y_pred):
        return K.mean(y_pred)
    
    #protein_target=np.random.rand(16)
    #protein_target=np.random.rand(16,269748)
    #protein_train=np.random.rand(16,11,120,120,120)

    adam = Adam(lr=0.0003, decay=0.01)
    seq.compile(loss='mean_squared_error',
            optimizer=adam,
              metrics=['accuracy', mean_pred])

    
    seq.fit(protein_train,protein_target,
          epochs=20,
          batch_size=9)
    
    print('Training done')

